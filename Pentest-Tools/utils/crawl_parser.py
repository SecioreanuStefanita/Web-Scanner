import json
import re
import publicsuffix
from urllib.parse import urlparse, parse_qs
from bs4 import BeautifulSoup
from publicsuffix2 import get_public_suffix
import validators

def map_params(array):
    params = []
    for item in array:
        input_string = "<input "+item+" >"
        soup = BeautifulSoup(input_string)
        type = soup.find('input').get('type') or ''
        if type in ['button', 'submit']:
            continue
        name = soup.find('input').get('name') or ''
        value = soup.find('input').get('value') or ''
        pattern = soup.find('input').get('pattern') or ''
        placeholder = soup.find('input').get('placeholder') or ''
        min = soup.find('input').get('min') or ''
        max = soup.find('input').get('max') or ''
        maxlength = soup.find('input').get('maxlength') or ''
        step = soup.find('input').get('step') or ''
        params.append(type + "|" + name + "|" + value + "|" + placeholder +
                      "|" + pattern + "|" + min + "|" + max + "|" + maxlength +
                      "|" + step)

    return params


def get_base_domain(url):
    hostname = urlparse(url).hostname
    return hostname


def parse_log_data(data):
    url = data["page"]
    forms_array = []
    for form in data["forms"]:
        form_string = "<form "+form+"</form>"
        soup = BeautifulSoup(form_string)
        action = soup.find('form').get('action')
        method = soup.find('form').get('method')
        req_header = soup.find('form').get('enctype')
        if not action:
            url = data["page"]
        else:
            if validators.url(action):
                url = action
            else:  
                url = get_base_domain(data["page"])+"/"+action.strip('/')

        if not method:
            method = "GET"
        params_string = re.findall(r"\<input ([\S\s]*?)\>", form)
        forms_array.append({
            "url": url,
            "method": method,
            "params": map_params(params_string),
            "headers": {"Content-Type": "application/x-www-form-urlencoded"} if not req_header else {"Content-Type": req_header}
        })
    return forms_array


def extract_data_from_file(filename):
    f = open(filename)
    data = []
    rawData = json.load(f)
    for i in rawData:
        data.extend(parse_log_data(i))
    f.close()
    return data
