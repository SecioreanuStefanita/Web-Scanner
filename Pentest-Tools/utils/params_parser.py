from collections import defaultdict
import rstr
import random
import string
from utils.payloads import get_payloads


def make_param_attr(params_array, scan_string, hostname):
    payloads = []
    match scan_string:
        case 'sqli':
            payloads = get_payloads('sqli', hostname)
        case 'ssti':
            payloads = get_payloads('ssti', hostname)
        case 'deserial':
            payloads = get_payloads('deserial', hostname)
        case default:
            payloads = []
    if len(payloads) != 0:
        return generate_params(payloads, params_array)


def generate_params(payloads, params_array):
    request_bodys = []
    for payload in payloads:
        for index in range(len(params_array)):
                 request_bodys.append(construct_body(index, params_array, payload))
    return request_bodys


def construct_body(index, params_array, payload):
    body_obj = dict()
    for i in range(len(params_array)):
        param_data = params_array[i].split("|")
        if i == index:
            if param_data[0] in ['disabled', 'hidden']:
                continue
            if param_data[0] not in ['hidden']:
                body_obj[param_data[1]] = payload
            else:
                body_obj[param_data[1]] = param_data[2]
        else:
            if params_array[index].split("|")[0] in ['disabled', 'hidden']:
                continue
            else:
                body_obj[param_data[1]] = choose_random_value(param_data)

    return body_obj


def choose_random_value(param_data):
    if param_data[0] in ["number"]:
        if param_data[5] and param_data[6]:
            if param_data[8]:
                return random.randint(int(int(param_data[5])/int(param_data[8])), int(int(param_data[6])/int(param_data[8])))*int(param_data[8])
            else:
                return random.randint(int(param_data[5]), int(param_data[6]))
        elif param_data[8]:
            return 0
        else:
            return random.randint(0, 255)

    elif param_data[0] in ["hidden", "password", "search", "text", ""] or not param_data[0] or param_data[0] not in ['button', 'checkbox', 'color', 'date', 'datetime-local','file', 'image', 'month', 'radio', 'range', 'submit']:
        if param_data[2]:
            return param_data[2]
        elif param_data[3]:
            return param_data[3]
        elif param_data[4]:
            return rstr.xeger(r'{data}'.format(data=param_data[4]))
        else:
            length_of_word = 10
            if param_data[7]:
                length_of_word = int(param_data[7])
            return ''.join(random.choices(string.ascii_lowercase, k=length_of_word))
